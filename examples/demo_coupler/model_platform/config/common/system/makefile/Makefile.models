# Common Makefile: a framework for building all component models
#
# This Makefile was originally from CCSM, and then modified by Dr. Cheng Zhang
# and Dr. Li Liu (liuli-cess@tsinghua.edu.cn)
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# parse cmd-line and establish values for EXEC, VPATH, SRCS, OBJS, etc
#-------------------------------------------------------------------------------

VPATH    := .
SRCFILE  := NONE
SRCS     := NONE
DEPGEN   := ./makdep  # an externally provided dependency generator

ifneq ($(VPATH),.)
  # this variable was specified on cmd line or in an env var
else
  ifneq ($(VPFILE),NONE)
    # explicit list of VPATH dirs is provided
    VPATH := $(wildcard . $(shell cat $(VPFILE) ) )
  endif
endif

ifneq ($(SRCS),NONE)
  # this variable was specified on cmd line or in an env var
else
  ifneq ($(SRCFILE),NONE)
    # explicit list of src files is provided
    SRCS := $(shell cat $(SRCFILE) )
  else
    # list of src files is all .F90 .F .c files in VPATH
    SRCS := $(wildcard $(addsuffix /*.cxx , $(VPATH)) \
		       $(addsuffix /*.F90, $(VPATH)) \
		       $(addsuffix /*.For, $(VPATH)) \
		       $(addsuffix /*.F, $(VPATH)) \
		       $(addsuffix /*.f90, $(VPATH)) \
		       $(addsuffix /*.[cF], $(VPATH)) )
  endif
endif

OBJS  := $(addsuffix .o, $(sort $(basename $(notdir $(SRCS)))))
DEPS  := $(addsuffix .d, $(sort $(basename $(notdir $(SRCS)))))
INCS  := $(patsubst %,-I%, $(VPATH) )
RM    := rm

.SUFFIXES:
.SUFFIXES: .cxx .For .F90 .f90 .F .f .c .o

all: $(EXEC)

#-------------------------------------------------------------------------------
# include the file that provides macro definitions required by build rules
# note: the MACFILE may not be needed for certain goals
#-------------------------------------------------------------------------------

ifneq ($(MAKECMDGOALS), db_files)
  -include $(MACFILE)
  ifeq ($(USE_OMP),TRUE)
        CFLAGS      += -openmp
        CXXFLAGS    += -openmp
        FFLAGS      += -openmp
        LDFLAGS     += -openmp
  endif
endif

#-------------------------------------------------------------------------------
# echo file names, paths, compile flags, etc. used during build
#-------------------------------------------------------------------------------

db_files:
	@echo " "
	@echo "* EXEC    := $(EXEC)"
	@echo "* MACFILE := $(MACFILE)"
	@echo "* VPFILE  := $(VPFILE)"
	@echo "* VPATH   := $(VPATH)"
	@echo "* SRCFILE := $(SRCFILE)"
	@echo "* INCS    := $(INCS)"
	@echo "* SRCS    := $(SRCS)"
	@echo "* OBJS    := $(OBJS)"
	@echo "* DEPS    := $(DEPS)"
db_flags:
	@echo " "
	@echo "* cpp     := $(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL)"
	@echo "* cc      := $(CC)  $(CFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL)"
	@echo "* .F.o    := $(FC)  $(FFLAGS) $(CPPDEFS) $(FIXEDFLAGS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL)"
	@echo "* .F90.o  := $(FC)  $(FFLAGS) $(CPPDEFS) $(FREEFLAGS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL)"
	@echo "* .f90.o  := $(FC)  $(FFLAGS) $(CPPDEFS) $(FREEFLAGS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL)"

#-------------------------------------------------------------------------------
# build rules: MACFILE, cmd-line, or env vars must provide the needed macros
#-------------------------------------------------------------------------------

$(EXEC): $(OBJS)
	$(LD) -lstdc++ -o $(EXEC) $(OBJS) $(ULIBS) $(SLIBS) $(LDFLAGS) 

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCS) $(INCLDIR) $(CPPDEFS) $(CASE_LOCAL_INCL) $<

.c.o:
	$(CC) -c $(INCLDIR) $(CASE_LOCAL_INCL) $(INCS) $(CPPDEFS) $(CFLAGS)  $<

ifeq ($(CPP),NONE)
.f90.o:
	$(FC) -c $(INCLDIR) $(CASE_LOCAL_INCL) $(INCS) $(FFLAGS) $(FREEFLAGS)  $(CPPFLAGS) $(CPPDEFS) $<

.F.o:
	$(FC) -c $(INCLDIR) $(CASE_LOCAL_INCL) $(INCS) $(FFLAGS) $(FIXEDFLAGS) $(CPPFLAGS) $(CPPDEFS) $<

.F90.o:
	$(FC) -c $(INCLDIR) $(CASE_LOCAL_INCL) $(INCS) $(FFLAGS) $(FREEFLAGS)  $(CPPFLAGS) $(CPPDEFS) $<

.For.o:
	$(FC) -c $(INCLDIR) $(CASE_LOCAL_INCL) $(INCS) $(FFLAGS) $(FREEFLAGS)  $(CPPFLAGS) $(CPPDEFS) $<

else
.f90.o:
	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $< > $*.F90 
	$(FC) -c $(FFLAGS) $(FIXEDFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $*.F90  

.F.o:
	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $< > $*.f 
	$(FC) -c $(FFLAGS) $(FIXEDFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $*.f  

.F90.o:
	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $< > $*.f90
	$(FC) -c $(FFLAGS) $(FREEFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $*.f90  

.For.o:
	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $< > $*.f
	$(FC) -c $(FFLAGS) $(FREEFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $(CASE_LOCAL_INCL) $*.f

endif

mostlyclean:
	$(RM) -f *.f *.f90 *.F90 *.F *.For

clean:
	$(RM) -f *.f *.F *.F90 *.For *.f90 *.d *.$(MOD_SUFFIX) $(OBJS)

realclean:
	$(RM) -f *.f *.F *.F90 *.For *.f90 *.d *.$(MOD_SUFFIX) $(OBJS) $(EXEC)

#-------------------------------------------------------------------------------
# Build & include dependency files
#-------------------------------------------------------------------------------
# ASSUMPTIONS:
# o an externally provided dependency generator, $(DEPGEN), is available, 
#   its cmd line syntax is compatible with the build rules below.   Eg, for 
#   each .o file, there is a corresponding .d (dependency) file, and both
#   will be dependent on the same src file, eg.    foo.o foo.d : foo.F90
#   Also, the dependancy genorator's capabilities, limitations, and assumptions
#   are understood & accepted.
#-------------------------------------------------------------------------------

%.d : %.c
	@ echo "Building dependency for $@"
	@ $(DEPGEN) -f $(INCS) $< | head -3  > $@
%.d : %.F
	@ echo "Building dependency for $@"
	@ $(DEPGEN) -f $(INCS) $<  > $@
%.d : %.F90
	@ echo "Building dependency for $@"
	@ $(DEPGEN) -f $(INCS) $<  > $@
%.d : %.For
	@ echo "Building dependency for $@"
	@ $(DEPGEN) -f $(INCS) $<  > $@
%.d : %.f90
	@ echo "Building dependency for $@"
	@ $(DEPGEN) -f $(INCS) $<  > $@
%.d : %.H
	@ echo "Building dependency for $@"
	@ $(DEPGEN) -f $(INCS) $<  > $@

# the if-tests prevent DEPS files from being created when they're not needed
ifneq ($(MAKECMDGOALS), db_files)
ifneq ($(MAKECMDGOALS), db_flags)
ifneq ($(MAKECMDGOALS), mostlyclean)
ifneq ($(MAKECMDGOALS), clean)
ifneq ($(MAKECMDGOALS), realclean)
    -include $(DEPS)
endif
endif
endif
endif
endif
